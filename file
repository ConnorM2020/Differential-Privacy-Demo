<!DOCTYPE html>
<html>

<head>

    <title>Differential Privacy Demo</title>
    <style>
        body {
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #ffffff;
        }

        header {
            background-color: #000;
            color: #ff3c3c;
            padding: 20px;
            text-align: center;
            font-size: 24px;
            letter-spacing: 1px;
            font-weight: bold;
        }

        .container-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-auto-rows: auto;
            gap: 20px;
            padding: 20px;
            max-width: 95vw;
            margin: auto;
        }

        .box {
            background: #ffffff;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
            overflow: auto;
            min-height: 250px;
        }

        .box-full {
            grid-column: span 2;
        }

        table {
            width: 100%;
            font-size: 12px;
            table-layout: fixed;
            word-wrap: break-word;
        }

        th,
        td {
            padding: 6px;
            border: 1px solid #ccc;
            text-align: center;
        }

        label {
            font-weight: bold;
        }

        input[type="range"] {
            width: 200px;
        }

        @media (max-width: 1000px) {
            .container-grid {
                grid-template-columns: 1fr;
            }

            .box-full {
                grid-column: span 1;
            }
        }

        .info {
            background: #f9f9f9;
            border: 1px solid #ccc;
            padding: 10px;
            margin-top: 20px;
        }

        .summary-section {
            display: flex;
            gap: 60px;
            justify-content: center;
            align-items: flex-start;
        }

        .summary-section ul {
            margin-top: 0;
        }

        th,
        td {
            padding: 4px 6px;
            /* Less padding */
            border: 1px solid #ccc;
            text-align: center;
            font-family: Arial, sans-serif;
        }

        /* Modal background overlay */
        .modal-overlay {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.6);
            justify-content: center;
            align-items: center;
        }

        /* Modal content */
        .modal-content {
            background-color: #fff;
            padding: 25px;
            border-radius: 10px;
            width: 400px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .modal-content h3 {
            margin-top: 0;
            margin-bottom: 15px;
        }

        .close-btn {
            float: right;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }

        .open-modal-btn {
            margin: 15px;
            padding: 10px 20px;
            background-color: #ff3c3c;
            color: white;
            border: none;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
        }

        .topbar {
            position: fixed;
            top: 10px;
            left: 10px;
            z-index: 2000;
        }

        .dots-btn {
            font-size: 24px;
            background: none;
            border: none;
            cursor: pointer;
            color: white;
            padding: 6px 10px;
            background-color: #222;
            border-radius: 5px;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            top: 40px;
            left: 0;
            background-color: #fff;
            min-width: 160px;
            border: 1px solid #ccc;
            z-index: 3000;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);
        }

        .dropdown-content a {
            color: black;
            padding: 10px 14px;
            text-decoration: none;
            display: block;
        }

        .dropdown-content a:hover {
            background-color: #f2f2f2;
        }
    </style>

    <script>
        // Functions for the Query selection - including topbar and toggle button
        function toggleModal(show) {
            document.getElementById("queryModal").style.display = show ? "flex" : "none";
        }
        window.addEventListener("click", function (e) {
            const modal = document.getElementById("queryModal");
            if (e.target === modal) {
                modal.style.display = "none";
            }
        });
        function toggleMenu() {
            const menu = document.getElementById("dropdownMenu");
            menu.style.display = (menu.style.display === "block") ? "none" : "block";
        }

        window.onclick = function (event) {
            const menu = document.getElementById("dropdownMenu");
            const btn = document.querySelector(".dots-btn");

            if (!menu.contains(event.target) && event.target !== btn) {
                menu.style.display = "none";
            }
        };

    </script>

    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Add Charts.js -->

</head>

<body>
    <header>Differential Privacy Dashboard</header>
    <div class="topbar">
        <button class="dots-btn" onclick="toggleMenu()">⋮</button>
        <div id="dropdownMenu" class="dropdown-content">
            <a href="#" onclick="toggleModal(true)">Query Patient Data</a>
            <a href="#">Export CSV</a>
            <a href="#">About</a>
        </div>
    </div>

    <div class="container-grid">

        <!-- Box 1: Query Form -->
        <!-- Modal for Query Interface -->
        <div id="queryModal" class="modal-overlay">
            <div class="modal-content">
                <span class="close-btn" onclick="toggleModal(false)">✖</span>
                <h3>DP Query Interface</h3>
                <form method="post">
                    Town: <input type="text" name="town"><br>
                    Diagnosis: <input type="text" name="diagnosis"><br>
                    Epsilon for Count: <input type="number" step="0.01" name="epsilon_count" value="0.5"><br>
                    Epsilon for Average Age: <input type="number" step="0.01" name="epsilon_avg" value="0.5"><br>
                    <br>
                    <input type="submit" value="Submit">
                </form>
            </div>
        </div>

        <!-- Box 2: Wider Data Table -->
        <div class="box box-full">
            <h3>Sample Patient Data (First 10 Rows)</h3>
            <table>
                <thead>
                    <tr>
                        {% for col in sample_data.columns %}
                        <th>{{ col }}</th>
                        {% endfor %}
                    </tr>
                </thead>
                <tbody>
                    {% for _, row in sample_data.head(10).iterrows() %}
                    <tr>
                        {% for col in sample_data.columns %}
                        <td>{{ row[col] }}</td>
                        {% endfor %}
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

       <!-- Box 3: Chart on the left -->
        <div class="box">
            <h3>Accuracy vs Privacy</h3>
            <canvas id="accuracyChart" width="100%" height="150"></canvas>
        </div>

        <!-- Box 4: Map + Sliders on the right -->
        <div class="box">
            <h3>Location Privacy & Map</h3>
            <div id="map" style="height: 300px; margin-bottom: 15px;"></div>

            <div style="margin-bottom: 10px;">
                <label for="epsilon_slider">ε (Attributes):</label>
                <input type="range" id="epsilon_slider" min="0.01" max="1.0" step="0.01" value="0.5"
                    oninput="updateNoiseLabel(this.value)">
                <span id="epsilon_value">0.5</span>
            </div>

            <div>
                <label for="location_slider">ε (Location):</label>
                <input type="range" id="location_slider" min="0.01" max="1.0" step="0.01" value="0.5"
                    oninput="updateLocationNoise(this.value)">
                <span id="location_epsilon_value">0.5</span>
            </div>
        </div>


    <!-- Start of Front end function definitions. -->
    <script>
        let map, markerLayer;
        let locationEpsilon = 0.5;

        let noisyAttributeData = [];
        let noisyLocationData = [];
        let columnHeaders = [];

        let attrReady = false;
        let locReady = false;


        //  Alter noise functions

        function updateNoiseLabel(val) {
            val = parseFloat(val).toFixed(2);
            document.getElementById("epsilon_value").textContent = val;
            document.querySelector('input[name="epsilon_avg"]').value = val;
            document.querySelector('input[name="epsilon_count"]').value = val;

            attrReady = false;

            fetch(`/noisy_data?epsilon=${val}`)
                .then(res => res.json())
                .then(data => {
                    noisyAttributeData = data.records;
                    columnHeaders = data.columns;
                    attrReady = true;
                    if (attrReady && locReady) {
                        mergeAndRender(noisyAttributeData, noisyLocationData, columnHeaders);
                    }
                });
        }


        // Fetch and update attribute-based noise (ε for age, etc.)
        function updateAttributeNoise(val) {
            const epsilon = parseFloat(val).toFixed(2);
            document.getElementById("epsilon_value").textContent = epsilon;
            document.querySelector('input[name="epsilon_avg"]').value = epsilon;
            document.querySelector('input[name="epsilon_count"]').value = epsilon;

            attrReady = false;

            fetch(`/noisy_data?epsilon=${epsilon}`)
                .then(res => res.json())
                .then(data => {
                    noisyAttributeData = data.records;
                    columnHeaders = data.columns;
                    attrReady = true;
                    if (attrReady && locReady) {
                        mergeAndRender(noisyAttributeData, noisyLocationData, columnHeaders);
                    }
                });
        }
        // Location nosie function
        // Fetch and update location noise (ε for coordinates)
        function updateLocationNoise(val) {
            locationEpsilon = parseFloat(val).toFixed(2);
            document.getElementById("location_epsilon_value").textContent = locationEpsilon;

            locReady = false;

            fetch(`/noisy_location_data?loc_epsilon=${locationEpsilon}`)
                .then(res => res.json())
                .then(data => {
                    noisyLocationData = data.records;
                    locReady = true;
                    if (attrReady && locReady) {
                        mergeAndRender(noisyAttributeData, noisyLocationData, columnHeaders);
                    }
                });
        }

        // Merge and display both noisy datasets
        function mergeAndRender(attrData, locData, columns) {
            if (!attrData.length || !locData.length) return;

            const merged = attrData.map((attrRow, i) => {
                const locRow = locData[i] || {};
                return {
                    ...attrRow,
                    town_lat: locRow.town_lat ?? attrRow.town_lat,
                    town_lon: locRow.town_lon ?? attrRow.town_lon
                };
            });

            renderTableAndMap({ columns, records: merged });
        }

        // Display merged table and map markers
        function renderTableAndMap(data) {
            const table = document.querySelector("#sample_table tbody");
            const columns = data.columns;
            const records = data.records;
            table.innerHTML = "";

            records.forEach(row => {
                const tr = document.createElement("tr");
                columns.forEach(col => {
                    const td = document.createElement("td");
                    td.textContent = row[col];
                    tr.appendChild(td);
                });
                table.appendChild(tr);
            });

            if (markerLayer) {
                markerLayer.clearLayers();
            } else {
                markerLayer = L.layerGroup().addTo(map);
            }

            records.forEach(loc => {
                if (loc.town_lat && loc.town_lon) {
                    const popupHtml = `
                <b>${loc.forename} ${loc.surname}</b><br>
                Age: ${loc.age}<br>
                Gender: ${loc.gender}<br>
                Town: ${loc.town}<br>
                Diagnosis: ${loc.diagnosis}<br>
                Email: <a href="mailto:${loc.email}">${loc.email}</a><br>
                Phone: ${loc.phone_number}<br>
                Address: ${loc.address}
            `;
                    L.marker([loc.town_lat, loc.town_lon])
                        .bindPopup(popupHtml)
                        .addTo(markerLayer);
                }
            });
        }

        // When the page is ready, initialize the map and sliders
        document.addEventListener("DOMContentLoaded", function () {
            map = L.map('map').setView([53.5, -7.6], 6);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            markerLayer = L.layerGroup().addTo(map);

            const epsilon = document.getElementById("epsilon_slider").value;
            const locEpsilon = document.getElementById("location_slider").value;

            updateAttributeNoise(epsilon);
            updateLocationNoise(locEpsilon);
        });
    </script>


    </script>
    {% if patient_coords %}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            map = L.map('map').setView([53.5, -7.6], 6);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            markerLayer = L.layerGroup().addTo(map);

            // Fetch both datasets and merge
            const epsilon = document.getElementById("epsilon_slider").value;
            const locEpsilon = document.getElementById("location_slider").value;

            Promise.all([
                fetch(`/noisy_data?epsilon=${epsilon}`).then(res => res.json()),
                fetch(`/noisy_location_data?loc_epsilon=${locEpsilon}`).then(res => res.json())
            ]).then(([attrData, locData]) => {
                noisyAttributeData = attrData.records;
                noisyLocationData = locData.records;
                columnHeaders = attrData.columns;
                mergeAndRender(noisyAttributeData, noisyLocationData, columnHeaders);
            });

            updateNoiseLabel(epsilon);         // for table update
            updateLocationNoise(locEpsilon);  // for location update
        });

        updateNoiseLabel(document.getElementById("epsilon_slider").value);
        updateLocationNoise(document.getElementById("location_slider").value);
    </script>
    {% endif %}

    <!-- Always place the endif - after the \script -->

</body>

</html>
<script>
    // --- Chart.js Setup for Accuracy MAE ---
    const accuracyCtx = document.getElementById("accuracyChart").getContext("2d");

    const accuracyChart = new Chart(accuracyCtx, {
        type: "line",
        data: {
            labels: [],
            datasets: [
                {
                    label: "Age MAE",
                    borderColor: "blue",
                    data: [],
                    fill: false
                },
                {
                    label: "Latitude MAE",
                    borderColor: "green",
                    data: [],
                    fill: false
                },
                {
                    label: "Longitude MAE",
                    borderColor: "red",
                    data: [],
                    fill: false
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: "bottom"
                }
            },
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Epsilon (ε)'
                    }
                },
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Mean Absolute Error (MAE)'
                    }
                }
            }
        }
    });

    // Fetch accuracy and update chart
    async function updateAccuracyChart(epsilon) {
        try {
            const res = await fetch(`/accuracy_metrics?epsilon=${epsilon}`);
            const result = await res.json();

            const { age_mae, lat_mae, lon_mae } = result;

            // Add epsilon as label only if not already added
            const label = epsilon.toFixed(2);
            if (!accuracyChart.data.labels.includes(label)) {
                accuracyChart.data.labels.push(label);
                accuracyChart.data.datasets[0].data.push(age_mae);
                accuracyChart.data.datasets[1].data.push(lat_mae);
                accuracyChart.data.datasets[2].data.push(lon_mae);
                accuracyChart.update();
            }
        } catch (err) {
            console.error("Error updating accuracy chart:", err);
        }
    }

    // Attach to both sliders
    document.getElementById("epsilon_slider").addEventListener("input", function () {
        const epsilon = parseFloat(this.value);
        updateAccuracyChart(epsilon);
    });

    document.getElementById("location_slider").addEventListener("input", function () {
        const epsilon = parseFloat(document.getElementById("epsilon_slider").value);
        updateAccuracyChart(epsilon);
    });

    // Initial chart draw
    updateAccuracyChart(parseFloat(document.getElementById("epsilon_slider").value));
</script>